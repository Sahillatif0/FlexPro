generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  studentId   String   @unique
  role        String   @default("student")
  program     String
  semester    Int      @default(1)
  cgpa        Float    @default(0.0)
  bio         String?
  phone       String?
  address     String?
  avatar      String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  enrollments      Enrollment[]
  transcripts      Transcript[]
  attendances      Attendance[]
  notifications    Notification[]
  feeInvoices      FeeInvoice[]
  feePayments      FeePayment[]
  feedbacks        Feedback[]
  gradeRequests    GradeRequest[]
  studyPlans       StudyPlan[]

  @@map("users")
}

model Course {
  id            String   @id @default(cuid())
  code          String   @unique
  title         String
  description   String?
  creditHours   Int
  prerequisite  String?
  department    String
  semester      Int
  isActive      Boolean  @default(true)
  maxCapacity   Int      @default(50)
  instructor    String
  schedule      String
  room          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  enrollments   Enrollment[]
  transcripts   Transcript[]
  attendances   Attendance[]
  feedbacks     Feedback[]
  studyPlanItems StudyPlanItem[]

  @@map("courses")
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  termId    String
  status    String   @default("enrolled") // enrolled, dropped, completed
  enrolledAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id])
  term      Term     @relation(fields: [termId], references: [id])

  @@unique([userId, courseId, termId])
  @@map("enrollments")
}

model Term {
  id          String   @id @default(cuid())
  name        String   @unique
  year        Int
  season      String   // Fall, Spring, Summer
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(false)
  
  enrollments    Enrollment[]
  transcripts    Transcript[]
  attendances    Attendance[]
  feeInvoices    FeeInvoice[]
  gradeRequests  GradeRequest[]
  feedbacks      Feedback[]

  @@map("terms")
}

model Transcript {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  termId    String
  grade     String
  gradePoints Float
  status    String   @default("final") // midterm, final
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id])
  term      Term     @relation(fields: [termId], references: [id])

  @@unique([userId, courseId, termId, status])
  @@map("transcripts")
}

model Attendance {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  termId      String
  date        DateTime
  status      String   // present, absent, late
  markedBy    String?
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id])
  term        Term     @relation(fields: [termId], references: [id])

  @@unique([userId, courseId, termId, date])
  @@map("attendances")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String?
  title     String
  message   String
  type      String   @default("info") // info, warning, success, error
  isRead    Boolean  @default(false)
  isGlobal  Boolean  @default(false)
  createdAt DateTime @default(now())
  
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model FeeInvoice {
  id          String   @id @default(cuid())
  userId      String
  termId      String
  amount      Float
  dueDate     DateTime
  description String
  status      String   @default("pending") // pending, paid, overdue
  createdAt   DateTime @default(now())
  
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  term        Term         @relation(fields: [termId], references: [id])
  payments    FeePayment[]

  @@map("fee_invoices")
}

model FeePayment {
  id          String   @id @default(cuid())
  userId      String
  invoiceId   String
  amount      Float
  method      String   // bank, online, cash
  reference   String?
  paidAt      DateTime @default(now())
  
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoice     FeeInvoice @relation(fields: [invoiceId], references: [id])

  @@map("fee_payments")
}

model Feedback {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  termId    String
  rating    Int      // 1-5 stars
  comment   String?
  isAnonymous Boolean @default(false)
  submittedAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id])
  term      Term     @relation(fields: [termId], references: [id])

  @@unique([userId, courseId, termId])
  @@map("feedbacks")
}

model GradeRequest {
  id          String   @id @default(cuid())
  userId      String
  termId      String
  courseCode  String
  currentGrade String
  requestedGrade String
  reason      String
  status      String   @default("pending") // pending, approved, rejected
  adminNotes  String?
  submittedAt DateTime @default(now())
  reviewedAt  DateTime?
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  term        Term     @relation(fields: [termId], references: [id])

  @@map("grade_requests")
}

model StudyPlan {
  id        String   @id @default(cuid())
  userId    String
  title     String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     StudyPlanItem[]

  @@map("study_plans")
}

model StudyPlanItem {
  id          String   @id @default(cuid())
  studyPlanId String
  courseId    String
  semester    Int
  year        Int
  order       Int      @default(0)
  
  studyPlan   StudyPlan @relation(fields: [studyPlanId], references: [id], onDelete: Cascade)
  course      Course    @relation(fields: [courseId], references: [id])

  @@unique([studyPlanId, courseId])
  @@map("study_plan_items")
}